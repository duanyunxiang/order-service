apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
      annotations:
        # 告知Prometheus要抓取该Pod中的容器
        prometheus.io/scrape: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "9002"
    spec:
      containers:
        - name: order-service
          image: order-service
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command: [ "sh", "-c", "sleep 5" ]
          ports:
            - containerPort: 9002
          env:
              #集群中catalog-service
            - name: POLAR_CATALOG_SERVICE_URI
              value: http://catalog-service
              # 集群中配置服务
            - name: SPRING_CLOUD_CONFIG_URI
              value: http://config-service
              # 集群中数据库
            - name: SPRING_R2DBC_URL
              value: r2dbc:postgresql://polar-postgres/polardb_order
            - name: SPRING_FLYWAY_URL
              value: jdbc:postgresql://polar-postgres/polardb_order
            - name: SPRING_RABBITMQ_HOST
              value: polar-rabbitmq
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI
              value: http://polar-keycloak/realms/PolarBookshop
            - name: LANG
              value: en_US.UTF-8
          # 配置存活探针
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 9002
            # 首次检查延迟，大于应用启动时间，否则会与部署应用冲突
            initialDelaySeconds: 20
            # 检查频率
            periodSeconds: 10
          # 配置就绪探针
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9002
            initialDelaySeconds: 5
            periodSeconds: 15
      volumes:
        - name: order-config-volume
          configMap:
            name: order-config
